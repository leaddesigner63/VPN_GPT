import asyncio
import os

import httpx
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, Message

from config import BOT_TOKEN
from utils.qrgen import make_qr

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

VPN_API_URL = os.getenv("VPN_API_URL", "https://vpn-gpt.store/api")
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")


async def request_key(username: str) -> dict:
    params = {"x-admin-token": ADMIN_TOKEN} if ADMIN_TOKEN else None
    async with httpx.AsyncClient(timeout=10.0) as client:
        response = await client.post(
            f"{VPN_API_URL.rstrip('/')}/vpn/issue_key",
            params=params,
            json={"username": username},
        )
    response.raise_for_status()
    return response.json()


async def request_key_info(username: str, chat_id: int | None = None) -> dict:
    params = {"username": username}
    if chat_id is not None:
        params["chat_id"] = chat_id

    async with httpx.AsyncClient(timeout=10.0) as client:
        response = await client.get(
            f"{VPN_API_URL.rstrip('/')}/vpn/my_key",
            params=params,
        )
    response.raise_for_status()
    return response.json()


@dp.message(Command("start"))
async def start(msg: Message):
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VPN_GPT. –°–µ–π—á–∞—Å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –∫–ª—é—á–∏ –≤—ã–¥–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    )
    await buy(msg)


@dp.message(Command("buy"))
async def buy(msg: Message):
    username = msg.from_user.username or f"id_{msg.from_user.id}"
    await msg.answer("‚è≥ –°–æ–∑–¥–∞—é —Ç–µ–±–µ VPN-–∫–ª—é—á‚Ä¶")
    try:
        payload = await request_key(username)
        link = payload.get("link")
        uuid_value = payload.get("uuid")
        expires = payload.get("expires_at")
        is_active = payload.get("active")
        if not link:
            raise ValueError("–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç API")

        if is_active is True:
            status_text = "–∞–∫—Ç–∏–≤–µ–Ω"
        elif is_active is False:
            status_text = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        else:
            status_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        info_lines = [
            "üéÅ –¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN-–∫–ª—é—á –≥–æ—Ç–æ–≤!",
            "",
            "üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:",
        ]
        if uuid_value:
            info_lines.append(f"UUID: {uuid_value}")
        if expires:
            info_lines.append(f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}")
        if is_active is not None:
            info_lines.append(f"–°—Ç–∞—Ç—É—Å: {status_text}")
        info_lines.append("üîó –°—Å—ã–ª–∫–∞:")
        info_lines.append(link)

        await msg.answer("\n".join(info_lines))
        qr = make_qr(link)
        await msg.answer_photo(
            BufferedInputFile(qr.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )
    except Exception:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")


@dp.message(Command("mykey"))
async def my_key(msg: Message):
    username = msg.from_user.username or f"id_{msg.from_user.id}"
    await msg.answer("üîé –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ—ë–º –∫–ª—é—á–µ‚Ä¶")

    try:
        payload = await request_key_info(username, chat_id=msg.chat.id)
    except Exception:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    if not payload.get("ok"):
        await msg.answer("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ /buy, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π.")
        return

    link = payload.get("link")
    uuid_value = payload.get("uuid")
    expires = payload.get("expires_at")
    is_active = payload.get("active")
    if is_active is True:
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω"
    elif is_active is False:
        status_text = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    else:
        status_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    info_lines = [
        "üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º VPN-–∫–ª—é—á–µ:",
    ]
    info_lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payload.get('username', username)}")
    if uuid_value:
        info_lines.append(f"UUID: {uuid_value}")
    if expires:
        info_lines.append(f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}")
    info_lines.append(f"–°—Ç–∞—Ç—É—Å: {status_text}")
    if link:
        info_lines.append("üîó –°—Å—ã–ª–∫–∞:")
        info_lines.append(link)

    await msg.answer("\n".join(info_lines))

    if link:
        qr = make_qr(link)
        await msg.answer_photo(
            BufferedInputFile(qr.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

