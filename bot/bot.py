import asyncio
import os

import httpx
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, Message

from config import BOT_TOKEN
from utils.qrgen import make_qr

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

VPN_API_URL = os.getenv("VPN_API_URL", "http://127.0.0.1:8000")
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")


async def request_key(username: str) -> dict:
    params = {"x-admin-token": ADMIN_TOKEN} if ADMIN_TOKEN else None
    async with httpx.AsyncClient(timeout=10.0) as client:
        response = await client.post(
            f"{VPN_API_URL.rstrip('/')}/vpn/issue_key",
            params=params,
            json={"username": username},
        )
    response.raise_for_status()
    return response.json()


@dp.message(Command("start"))
async def start(msg: Message):
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VPN_GPT. –°–µ–π—á–∞—Å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –∫–ª—é—á–∏ –≤—ã–¥–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    )
    await buy(msg)


@dp.message(Command("buy"))
async def buy(msg: Message):
    username = msg.from_user.username or f"id_{msg.from_user.id}"
    await msg.answer("‚è≥ –°–æ–∑–¥–∞—é —Ç–µ–±–µ VPN-–∫–ª—é—á‚Ä¶")
    try:
        payload = await request_key(username)
        link = payload.get("link")
        if not link:
            raise ValueError("–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç API")

        await msg.answer("üéÅ –¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN-–∫–ª—é—á –≥–æ—Ç–æ–≤!\n\nüîó –°—Å—ã–ª–∫–∞:\n" + link)
        qr = make_qr(link)
        await msg.answer_photo(
            BufferedInputFile(qr.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )
    except Exception:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

