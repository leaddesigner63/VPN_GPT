import asyncio
import logging
import os
from typing import Any
from urllib.parse import urlparse

import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    MenuButtonDefault,
    Message,
)

from config import BOT_TOKEN
from utils.qrgen import make_qr

logger = logging.getLogger("vpn_gpt.simple_bot")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def _load_api_urls() -> list[str]:
    raw_urls = os.getenv("VPN_API_URLS")
    if raw_urls:
        urls = [chunk.strip() for chunk in raw_urls.split(",") if chunk.strip()]
    else:
        single = os.getenv("VPN_API_URL")
        urls = [single.strip()] if single else []

    if not urls:
        urls = ["https://vpn-gpt.store/api", "http://127.0.0.1:8080"]

    normalized: list[str] = []
    for url in urls:
        if url:
            normalized.append(url.rstrip("/"))

    if not normalized:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ API –¥–ª—è VPN_GPT")

    return normalized


_VPN_API_URLS = _load_api_urls()
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")
RENEW_DAYS = int(os.getenv("VPN_RENEW_DAYS", "30"))
_ALLOWED_BUTTON_SCHEMES = {"http", "https", "tg"}


def build_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data="issue_key")],
            [InlineKeyboardButton(text="‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="renew_key")],
            [InlineKeyboardButton(text="üìÑ –ú–æ–π –∫–ª—é—á", callback_data="get_key")],
        ]
    )


def _is_supported_button_link(link: str) -> bool:
    """Return True when link is safe to use as a Telegram button URL."""

    if not link:
        return False

    try:
        parsed = urlparse(link)
    except ValueError:
        return False

    if parsed.scheme not in _ALLOWED_BUTTON_SCHEMES:
        return False

    if parsed.scheme in {"http", "https"}:
        return bool(parsed.netloc)

    # Telegram-specific deeplinks (tg://) may rely on path, netloc or query params.
    if parsed.scheme == "tg":
        return bool(parsed.path or parsed.netloc or parsed.query)

    return False


def build_result_markup(link: str | None = None) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    if link:
        normalized_link = link.strip()
        if normalized_link and _is_supported_button_link(normalized_link):
            buttons.append([InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=normalized_link)])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def format_key_info(payload: dict[str, Any], username: str, title: str) -> tuple[str, str | None]:
    lines: list[str] = [title]

    payload_username = payload.get("username")
    if payload_username:
        lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payload_username}")
    else:
        lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")

    uuid_value = payload.get("uuid")
    if uuid_value:
        lines.append(f"UUID: {uuid_value}")

    expires = payload.get("expires_at")
    if expires:
        lines.append(f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}")

    active = payload.get("active")
    if active is not None:
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if active else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        lines.append(f"–°—Ç–∞—Ç—É—Å: {status_text}")

    link = payload.get("link")
    if link:
        lines.append("")
        lines.append("üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        lines.append(link)

    return "\n".join(lines), link


async def _api_request(
    method: str,
    path: str,
    *,
    params: dict[str, Any] | None = None,
    json_payload: dict[str, Any] | None = None,
    timeout: float = 10.0,
) -> dict[str, Any]:
    last_error: httpx.RequestError | None = None

    for base_url in _VPN_API_URLS:
        url = f"{base_url}{path}"
        try:
            async with httpx.AsyncClient(timeout=timeout) as client:
                response = await client.request(
                    method,
                    url,
                    params=params,
                    json=json_payload,
                )
        except httpx.RequestError as exc:
            last_error = exc
            logger.warning(
                "Failed to call VPN API",
                extra={
                    "url": url,
                    "method": method,
                    "error": str(exc),
                },
            )
            continue

        response.raise_for_status()
        return response.json()

    if last_error is None:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ VPN API: –Ω–µ –∑–∞–¥–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å")

    raise last_error


async def request_key(username: str) -> dict:
    params = {"x-admin-token": ADMIN_TOKEN} if ADMIN_TOKEN else None
    return await _api_request(
        "POST",
        "/vpn/issue_key",
        params=params,
        json_payload={"username": username},
    )


async def renew_key(username: str, days: int = RENEW_DAYS) -> dict:
    params = {"x-admin-token": ADMIN_TOKEN} if ADMIN_TOKEN else None
    return await _api_request(
        "POST",
        "/vpn/renew_key",
        params=params,
        json_payload={"username": username, "days": days},
    )


async def request_key_info(username: str, chat_id: int | None = None) -> dict:
    params: dict[str, Any] = {"username": username}
    if chat_id is not None:
        params["chat_id"] = chat_id

    return await _api_request("GET", "/vpn/my_key", params=params)


@dp.message(Command("start"))
async def start(msg: Message):
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VPN_GPT. –°–µ–π—á–∞—Å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –∫–ª—é—á–∏ –≤—ã–¥–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
        "\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∑–∞ —Ç–µ–±—è.",
        reply_markup=build_main_menu(),
    )


@dp.message(Command("buy"))
async def buy(msg: Message):
    username = msg.from_user.username or f"id_{msg.from_user.id}"
    await handle_issue_key(msg, username)


@dp.message(Command("mykey"))
async def my_key(msg: Message):
    username = msg.from_user.username or f"id_{msg.from_user.id}"
    await handle_get_key(msg, username, msg.chat.id)


@dp.message(Command("renew"))
async def renew(msg: Message):
    username = msg.from_user.username or f"id_{msg.from_user.id}"
    await handle_renew_key(msg, username, msg.chat.id)


async def handle_issue_key(message: Message, username: str) -> None:
    progress = await message.answer("‚è≥ –°–æ–∑–¥–∞—é –¥–ª—è —Ç–µ–±—è VPN-–∫–ª—é—á‚Ä¶")
    try:
        payload = await request_key(username)
    except Exception:
        await progress.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=build_result_markup(),
        )
        return

    if not payload.get("ok"):
        await progress.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=build_result_markup(),
        )
        return

    text, link = format_key_info(payload, username, "üéÅ –¢–≤–æ–π VPN-–∫–ª—é—á –≥–æ—Ç–æ–≤!")
    await progress.edit_text(text, reply_markup=build_result_markup(link))

    if link:
        qr = make_qr(link)
        await message.answer_photo(
            BufferedInputFile(qr.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )


async def handle_get_key(message: Message, username: str, chat_id: int) -> None:
    progress = await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ—ë–º –∫–ª—é—á–µ‚Ä¶")

    try:
        payload = await request_key_info(username, chat_id=chat_id)
    except Exception:
        await progress.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=build_result_markup(),
        )
        return

    if not payload.get("ok"):
        await progress.edit_text(
            "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á\" –≤ –º–µ–Ω—é.",
            reply_markup=build_result_markup(),
        )
        return

    text, link = format_key_info(payload, username, "üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º VPN-–∫–ª—é—á–µ:")
    await progress.edit_text(text, reply_markup=build_result_markup(link))

    if link:
        qr = make_qr(link)
        await message.answer_photo(
            BufferedInputFile(qr.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )


async def handle_renew_key(message: Message, username: str, chat_id: int) -> None:
    progress = await message.answer("‚ôªÔ∏è –ü—Ä–æ–¥–ª–µ–≤–∞—é —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–≤–æ–µ–≥–æ –∫–ª—é—á–∞‚Ä¶")

    try:
        renew_payload = await renew_key(username)
    except Exception:
        await progress.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=build_result_markup(),
        )
        return

    if not renew_payload.get("ok"):
        detail = renew_payload.get("detail") or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø."
        await progress.edit_text(f"‚ö†Ô∏è {detail}", reply_markup=build_result_markup())
        return

    try:
        info_payload = await request_key_info(username, chat_id=chat_id)
    except Exception:
        info_payload = None

    if info_payload and info_payload.get("ok"):
        text, link = format_key_info(info_payload, username, "‚ôªÔ∏è –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω!")
    else:
        expires = renew_payload.get("expires_at")
        lines = ["‚ôªÔ∏è –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω!"]
        if expires:
            lines.append(f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expires}")
        link = None
        text = "\n".join(lines)

    await progress.edit_text(text, reply_markup=build_result_markup(link))

    if link:
        qr = make_qr(link)
        await message.answer_photo(
            BufferedInputFile(qr.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )


@dp.callback_query(F.data == "issue_key")
async def issue_key_callback(callback: CallbackQuery):
    await callback.answer()
    if not callback.message:
        return
    username = callback.from_user.username or f"id_{callback.from_user.id}"
    await handle_issue_key(callback.message, username)


@dp.callback_query(F.data == "renew_key")
async def renew_key_callback(callback: CallbackQuery):
    await callback.answer()
    if not callback.message:
        return
    username = callback.from_user.username or f"id_{callback.from_user.id}"
    await handle_renew_key(callback.message, username, callback.message.chat.id)


@dp.callback_query(F.data == "get_key")
async def get_key_callback(callback: CallbackQuery):
    await callback.answer()
    if not callback.message:
        return
    username = callback.from_user.username or f"id_{callback.from_user.id}"
    await handle_get_key(callback.message, username, callback.message.chat.id)


@dp.callback_query(F.data == "show_menu")
async def show_menu(callback: CallbackQuery):
    await callback.answer()
    if not callback.message:
        return
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_main_menu(),
    )


async def main():
    try:
        await bot.delete_my_commands()
        await bot.set_chat_menu_button(MenuButtonDefault())
    except Exception:
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ stdout.
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", flush=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

