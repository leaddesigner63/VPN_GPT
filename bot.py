from __future__ import annotations

import asyncio
from datetime import UTC, datetime, timedelta
from typing import Dict, List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove
from openai import AsyncOpenAI

from config import ADMIN_ID, BOT_TOKEN, GPT_API_KEY, GPT_ASSISTANT_ID
from utils.db import (
    get_all_active_users,
    get_expired_keys,
    get_expiring_keys,
    get_last_messages,
    init_db,
    renew_vpn_key,
    save_message,
    save_vpn_key,
)
from utils.qrgen import make_qr
from utils.vpn import add_vpn_user


if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable is not configured")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(api_key=GPT_API_KEY) if GPT_API_KEY else None


DEFAULT_SUBSCRIPTION_DAYS = 30
EXPIRING_THRESHOLD_DAYS = 3
BROADCAST_TIMEOUT = timedelta(minutes=10)


pending_broadcast: Dict[int, datetime] = {}
notified_expiring: set[Tuple[int, datetime]] = set()


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ===
def is_admin(user_id: int) -> bool:
    return ADMIN_ID is not None and user_id == ADMIN_ID


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start(msg: types.Message):
    if is_admin(msg.from_user.id):
        await msg.answer("üîß –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –û—Ç–ø—Ä–∞–≤—å /admin —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        await msg.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name or '–¥—Ä—É–≥'}!\n"
            "–Ø ‚Äî VPN GPT, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ VPN.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å /buy —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
            "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üëá"
        )


# === –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ===
@dp.message(Command("admin"))
async def admin_panel(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("/users", "/expired")
    keyboard.add("/broadcast")
    await msg.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


# === –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@dp.message(Command("users"))
async def list_users(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    users = get_all_active_users()
    if not users:
        return await msg.answer("üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")

    text = "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for u in users:
        uid, name, exp = u
        display_name = name or str(uid)
        display_date = exp[:10] if isinstance(exp, str) else exp
        text += f"‚Ä¢ {display_name} ‚Äî –¥–æ {display_date} (ID: {uid})\n"
    await msg.answer(text)


# === –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
@dp.message(Command("expired"))
async def expired_users(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    expired = get_expired_keys()
    if not expired:
        return await msg.answer("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")

    text = "üö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, full_name, _ in expired:
        text += f"‚Ä¢ {full_name or user_id} (ID: {user_id})\n"
    await msg.answer(text)


# === –†–∞—Å—Å—ã–ª–∫–∞ ===
@dp.message(Command("broadcast"))
async def broadcast(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    pending_broadcast[msg.from_user.id] = datetime.now(UTC)
    await msg.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."
        "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardRemove(),
    )


def _format_name(message: types.Message) -> str:
    user = message.from_user
    if not user:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user.full_name:
        return user.full_name
    if user.username:
        return f"@{user.username}"
    return str(user.id)


def _default_user_keyboard() -> ReplyKeyboardRemove:
    return ReplyKeyboardRemove()


async def _send_qr(message: types.Message, link: str, expires_at: datetime) -> None:
    qr = make_qr(link)
    photo = BufferedInputFile(qr.getvalue(), filename="vpn_qr.png")
    expires_text = expires_at.strftime("%d.%m.%Y")
    caption = (
        "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n"
        f"üìÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expires_text}.\n"
        "üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ."
    )
    await message.answer_photo(photo, caption=caption)
    await message.answer(link)


async def _handle_broadcast_text(message: types.Message) -> bool:
    admin_id = message.from_user.id if message.from_user else None
    if not admin_id or admin_id not in pending_broadcast:
        return False

    started_at = pending_broadcast.pop(admin_id)
    if not message.text:
        pending_broadcast[admin_id] = datetime.now(UTC)
        await message.answer(
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=_default_user_keyboard(),
        )
        return True
    if message.text == "/cancel":
        await message.answer("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=_default_user_keyboard())
        return True

    if datetime.now(UTC) - started_at > BROADCAST_TIMEOUT:
        await message.answer(
            "‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /broadcast, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=_default_user_keyboard(),
        )
        return True

    users = get_all_active_users()
    sent = 0
    for user_id, *_ in users:
        try:
            await bot.send_message(user_id, message.text)
            sent += 1
            await asyncio.sleep(0.2)
        except Exception:
            continue

    await message.answer(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=_default_user_keyboard(),
    )
    return True


async def _generate_ai_reply(message: types.Message) -> str:
    if not message.text:
        return "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."

    history = get_last_messages(message.from_user.id, limit=5)
    model = GPT_ASSISTANT_ID or "gpt-4o-mini"

    prompt_messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å–µ—Ä–≤–∏—Å–∞ VPN GPT. –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–æ–±—Ä–∞—Ç—å VPN,"
                " –æ–±—ä—è—Å–Ω–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –ø–æ–º–æ–≥–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º."
            ),
        }
    ]
    for previous_message, previous_reply in history:
        prompt_messages.append({"role": "user", "content": previous_message})
        prompt_messages.append({"role": "assistant", "content": previous_reply})
    prompt_messages.append({"role": "user", "content": message.text})

    if not client:
        return (
            "–°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN."
        )

    try:
        response = await client.chat.completions.create(
            model=model,
            messages=prompt_messages,
            temperature=0.7,
        )
    except Exception:
        return (
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ."
        )

    choices = getattr(response, "choices", None)
    if not choices:
        return "–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    reply = choices[0].message.content if choices[0].message else None
    if not reply:
        return "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    return reply.strip()


async def _notify_expiring_users() -> None:
    if not ADMIN_ID:
        return

    while True:
        await asyncio.sleep(3600)
        expiring = get_expiring_keys(EXPIRING_THRESHOLD_DAYS)
        fresh: List[str] = []
        for user_id, name, expires_at in expiring:
            key = (user_id, expires_at)
            if key in notified_expiring:
                continue
            notified_expiring.add(key)
            formatted_name = name or str(user_id)
            fresh.append(
                f"‚Ä¢ {formatted_name} ‚Äî –∏—Å—Ç–µ–∫–∞–µ—Ç {expires_at.strftime('%d.%m.%Y')}"
            )

        if fresh:
            text = "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–µ:\n" + "\n".join(fresh)
            try:
                await bot.send_message(ADMIN_ID, text)
            except Exception:
                pass


async def _handle_buy(message: types.Message) -> None:
    expires_at = datetime.now(UTC) + timedelta(days=DEFAULT_SUBSCRIPTION_DAYS)
    link = add_vpn_user()
    save_vpn_key(
        message.from_user.id,
        message.from_user.username if message.from_user else None,
        _format_name(message),
        link,
        expires_at,
    )
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    await _send_qr(message, link, expires_at)
    _log_interaction(
        message,
        "–í—ã–¥–∞–Ω–æ –Ω–æ–≤–æ–µ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –°—Å—ã–ª–∫–∞: {link}. –î–æ—Å—Ç—É–ø –¥–æ {date}.".format(
            link=link, date=expires_at.strftime("%d.%m.%Y")
        ),
    )


async def _handle_renew(message: types.Message) -> None:
    new_expiration = renew_vpn_key(message.from_user.id, DEFAULT_SUBSCRIPTION_DAYS)
    if not new_expiration:
        await message.answer(
            "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN.",
        )
        return
    reply = (
        "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n"
        f"–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ {new_expiration.strftime('%d.%m.%Y')}."
    )
    await message.answer(reply)
    _log_interaction(message, reply)


def _log_interaction(message: types.Message, reply: str) -> None:
    save_message(
        message.from_user.id,
        message.from_user.username if message.from_user else None,
        _format_name(message),
        message.text or "",
        reply,
    )


@dp.message(Command("buy"))
async def buy(message: types.Message) -> None:
    await _handle_buy(message)


@dp.message(Command("renew"))
async def renew(message: types.Message) -> None:
    await _handle_renew(message)


@dp.message(Command("cancel"))
async def cancel(message: types.Message) -> None:
    if await _handle_broadcast_text(message):
        return
    await message.answer(
        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=_default_user_keyboard()
    )


@dp.message()
async def handle_message(message: types.Message) -> None:
    if await _handle_broadcast_text(message):
        return
    if not message.text:
        await message.answer(
            "–Ø –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–æ–≤–∞–º–∏."
        )
        return

    reply = await _generate_ai_reply(message)
    await message.answer(reply)
    _log_interaction(message, reply)


async def main():
    init_db()
    asyncio.create_task(_notify_expiring_users())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

