import asyncio
import logging
import os
import sqlite3
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Awaitable, Callable, Dict

import httpx
from aiogram import BaseMiddleware, Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    BufferedInputFile,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)
from dotenv import load_dotenv
from openai import OpenAI

from api.utils import db as api_db
from utils.qrgen import make_qr
from utils.limits import should_block_issue

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv("/root/VPN_GPT/.env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
GPT_API_KEY = os.getenv("GPT_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")
VPN_API_URL = os.getenv("VPN_API_URL", "https://vpn-gpt.store/api")
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = OpenAI(api_key=GPT_API_KEY)


class VPNAPIError(RuntimeError):
    """Wrapper for API errors returned by the VPN backend."""

    def __init__(self, code: str, *, status: int | None = None, details: dict | None = None):
        super().__init__(code)
        self.code = code
        self.status = status
        self.details = details or {}


@dataclass(slots=True)
class VPNKey:
    username: str
    uuid: str
    link: str
    expires_at: str


@dataclass(slots=True)
class RenewInfo:
    username: str
    expires_at: str


class VPNAPIClient:
    """Async wrapper around the FastAPI backend used by GPT and the bot."""

    def __init__(self, base_url: str, admin_token: str | None = None, *, timeout: float = 10.0):
        self.base_url = base_url.rstrip("/")
        self.admin_token = admin_token or None
        self._timeout = timeout

    def _headers(self) -> dict[str, str]:
        if not self.admin_token:
            return {}
        return {"X-Admin-Token": self.admin_token}

    async def _request(self, method: str, path: str, *, json: dict | None = None, params: dict | None = None) -> dict:
        url = f"{self.base_url}{path}"
        async with httpx.AsyncClient(timeout=self._timeout) as session:
            response = await session.request(method, url, json=json, params=params, headers=self._headers())

        status = response.status_code
        try:
            payload = response.json()
        except ValueError as exc:  # pragma: no cover - defensive
            logging.exception("VPN API –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON", extra={"url": url, "status": status})
            raise VPNAPIError("invalid_json", status=status) from exc

        if status >= 400:
            error_code = payload.get("detail") if isinstance(payload, dict) else "http_error"
            raise VPNAPIError(str(error_code), status=status, details=payload if isinstance(payload, dict) else None)

        if isinstance(payload, dict) and payload.get("ok") is False:
            raise VPNAPIError(str(payload.get("error", "unknown_error")), status=status, details=payload)

        return payload

    async def issue_key(self, username: str, *, days: int = 3) -> VPNKey:
        payload = await self._request(
            "POST",
            "/vpn/issue_key",
            json={"username": username, "days": days},
        )
        return VPNKey(
            username=payload["username"],
            uuid=payload["uuid"],
            link=payload["link"],
            expires_at=payload["expires_at"],
        )

    async def renew_key(self, username: str, *, days: int = 30) -> RenewInfo:
        payload = await self._request(
            "POST",
            "/vpn/renew_key",
            json={"username": username, "days": days},
        )
        return RenewInfo(username=payload["username"], expires_at=payload["expires_at"])

    async def get_my_key(self, *, username: str | None = None, chat_id: int | None = None) -> dict:
        params: dict[str, Any] = {}
        if username:
            params["username"] = username
        if chat_id is not None:
            params["chat_id"] = chat_id
        return await self._request("GET", "/vpn/my_key", params=params)

    async def list_users(self) -> dict:
        return await self._request("GET", "/users/", params={"active_only": True})


vpn_api = VPNAPIClient(VPN_API_URL, admin_token=ADMIN_TOKEN or None)

DB_PATH = "/root/VPN_GPT/dialogs.db"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("/root/VPN_GPT/bot.log"), logging.StreamHandler()],
)

logger = logging.getLogger(__name__)


def _load_issue_limit() -> tuple[int | None, str | None]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω."""

    for env_name in ("FREE_KEYS_LIMIT", "VPN_FREE_KEYS_LIMIT", "VPN_KEY_LIMIT"):
        raw_value = os.getenv(env_name)
        if raw_value is None or not raw_value.strip():
            continue

        try:
            limit_value = int(raw_value)
        except ValueError:
            logger.warning(
                "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞", extra={"env": env_name, "value": raw_value}
            )
            continue

        if limit_value > 0:
            return limit_value, env_name

        logger.warning(
            "–õ–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º", extra={"env": env_name, "value": raw_value}
        )

    return None, None


KEY_ISSUE_LIMIT, KEY_LIMIT_ENV = _load_issue_limit()
if KEY_ISSUE_LIMIT:
    logger.info(
        "–í–∫–ª—é—á—ë–Ω –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π", extra={"limit": KEY_ISSUE_LIMIT, "source": KEY_LIMIT_ENV}
    )


KEY_LIMIT_REACHED_MESSAGE = (
    "‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–µ–º–æ-–∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –º—ã —É–∂–µ –≤—ã–¥–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ "
    "—Å–ª–æ—Ç—ã. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö."
)
KEY_LIMIT_CHECK_FAILED_MESSAGE = (
    "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Telegram ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å VPN")],
        [KeyboardButton(text="‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN")],
        [KeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def ensure_tables() -> None:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ë–î –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è API –∏ –±–æ—Ç–∞."""

    try:
        api_db.init_db()
    except Exception:  # pragma: no cover - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ API –¥–ª—è –ë–î")

    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS tg_users (
                username TEXT PRIMARY KEY,
                chat_id INTEGER,
                first_name TEXT,
                last_name TEXT,
                created_at TEXT
            )
            """
        )
        conn.commit()

def save_user(message: Message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            INSERT OR REPLACE INTO tg_users (username, chat_id, first_name, last_name, created_at)
            VALUES (?, ?, ?, ?, ?)
        """, (
            username,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.last_name,
            datetime.now().isoformat()
        ))
        conn.commit()
    return username

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def issue_and_send_key(message: Message, username: str) -> None:
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é —Ç–µ–±–µ VPN-–∫–ª—é—á‚Ä¶", reply_markup=main_kb)

    if KEY_ISSUE_LIMIT and KEY_ISSUE_LIMIT > 0:
        if not ADMIN_TOKEN:
            logger.error(
                "–í–∫–ª—é—á—ë–Ω –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π, –Ω–æ ADMIN_TOKEN –Ω–µ –∑–∞–¥–∞–Ω", extra={"username": username}
            )
            await message.answer(KEY_LIMIT_CHECK_FAILED_MESSAGE, reply_markup=main_kb)
            return

        try:
            stats = await vpn_api.list_users()
        except VPNAPIError as api_error:
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π",
                extra={"username": username, "error": api_error.code, "status": api_error.status},
            )
            await message.answer(KEY_LIMIT_CHECK_FAILED_MESSAGE, reply_markup=main_kb)
            return
        except Exception:
            logger.exception("–°–±–æ–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π", extra={"username": username})
            await message.answer(KEY_LIMIT_CHECK_FAILED_MESSAGE, reply_markup=main_kb)
            return

        users_payload = stats.get("users") if isinstance(stats, dict) else None
        if not isinstance(users_payload, list):
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞", extra={"payload": stats})
            await message.answer(KEY_LIMIT_CHECK_FAILED_MESSAGE, reply_markup=main_kb)
            return

        if should_block_issue(users_payload, username, KEY_ISSUE_LIMIT):
            logger.info(
                "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–π",
                extra={"limit": KEY_ISSUE_LIMIT, "username": username},
            )
            await message.answer(KEY_LIMIT_REACHED_MESSAGE, reply_markup=main_kb)
            return
    try:
        vpn_key = await vpn_api.issue_key(username)
    except VPNAPIError as api_error:
        logging.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á", extra={"username": username, "error": api_error.code, "status": api_error.status}
        )
        error_code = (api_error.code or "").lower()
        if api_error.code in {"user_has_active_key", "duplicate"}:
            await message.answer(
                "‚ÑπÔ∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–ª–∏ —Ç–µ–∫—É—â–∏–π.",
                reply_markup=main_kb,
            )
        elif api_error.code == "invalid_days":
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞.", reply_markup=main_kb)
        elif "limit" in error_code or "quota" in error_code:
            await message.answer(KEY_LIMIT_REACHED_MESSAGE, reply_markup=main_kb)
        else:
            status_info = f" (–∫–æ–¥ {api_error.status})" if api_error.status else ""
            await message.answer(
                "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ." + status_info,
                reply_markup=main_kb,
            )
        return
    except Exception:
        logging.exception("–°–±–æ–π –ø—Ä–∏ –≤—ã–¥–∞—á–µ VPN-–∫–ª—é—á–∞", extra={"username": username})
        await message.answer(
            "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=main_kb,
        )
        return

    await message.answer(
        "üéÅ –¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN-–∫–ª—é—á –≥–æ—Ç–æ–≤!\n\n"
        f"üîó –°—Å—ã–ª–∫–∞:\n{vpn_key.link}\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {vpn_key.expires_at}",
        reply_markup=main_kb,
    )

    qr_stream = make_qr(vpn_key.link)
    await message.answer_photo(
        BufferedInputFile(qr_stream.getvalue(), filename="vpn_key.png"),
        caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
    )


async def renew_vpn_key(message: Message, username: str) -> None:
    await message.answer("‚ôªÔ∏è –ü—Ä–æ–¥–ª—è—é —Ç–≤–æ–π VPN‚Ä¶", reply_markup=main_kb)
    try:
        info = await vpn_api.renew_key(username)
    except VPNAPIError as api_error:
        logging.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", extra={"username": username, "error": api_error.code, "status": api_error.status}
        )
        if api_error.code == "user_not_found":
            await message.answer(
                "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å VPN¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.",
                reply_markup=main_kb,
            )
        elif api_error.code == "invalid_days":
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", reply_markup=main_kb)
        else:
            status_info = f" (–∫–æ–¥ {api_error.status})" if api_error.status else ""
            await message.answer(
                "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á." + status_info,
                reply_markup=main_kb,
            )
        return
    except Exception:
        logging.exception("–°–±–æ–π –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ VPN-–∫–ª—é—á–∞", extra={"username": username})
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb,
        )
        return

    await message.answer(
        "‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω!\n"
        f"–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {info.expires_at}",
        reply_markup=main_kb,
    )


async def send_key_status(message: Message, username: str) -> None:
    try:
        payload = await vpn_api.get_my_key(username=username, chat_id=message.chat.id)
    except VPNAPIError as api_error:
        logging.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞",
            extra={"username": username, "error": api_error.code, "status": api_error.status},
        )
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_kb)
        return
    except Exception:
        logging.exception("–°–±–æ–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–∞", extra={"username": username})
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.", reply_markup=main_kb)
        return

    if not payload.get("ok"):
        await message.answer("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å VPN¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.", reply_markup=main_kb)
        return

    link = payload.get("link")
    expires = payload.get("expires_at")
    uuid_value = payload.get("uuid")
    text = (
        "üîê –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π VPN-–∫–ª—é—á\n"
        f"UUID: <code>{uuid_value}</code>\n"
        f"–°—Å—ã–ª–∫–∞: {link}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}"
    )
    await message.answer(text, reply_markup=main_kb)


@dp.message(CommandStart())
async def start_cmd(message: Message):
    username = save_user(message)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or username}!\n\n"
        f"–Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>VPN_GPT</b>.\n"
        "–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å VPN –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã–¥–∞—Ç—å –¥–µ–º–æ-–∫–ª—é—á.\n"
        "‚öôÔ∏è –ü–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ üëá"
    )
    await message.answer(text, reply_markup=main_kb)
    await issue_and_send_key(message, username)


@dp.message(Command("buy"))
async def buy_cmd(message: Message):
    username = save_user(message)
    await issue_and_send_key(message, username)


@dp.message(Command("renew"))
async def renew_cmd(message: Message):
    username = save_user(message)
    await renew_vpn_key(message, username)


@dp.message(Command("mykey"))
async def my_key_cmd(message: Message):
    username = save_user(message)
    await send_key_status(message, username)


@dp.message(Command("admin"))
async def admin_cmd(message: Message):
    username = save_user(message)
    if not ADMIN_ID or str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_kb)
        return

    try:
        users_payload = await vpn_api.list_users()
    except VPNAPIError as api_error:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", extra={"error": api_error.code})
        await message.answer("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_kb)
        return
    except Exception:
        logging.exception("–°–±–æ–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", extra={"username": username})
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.", reply_markup=main_kb)
        return

    users = users_payload.get("users", [])
    total = len(users)
    active_links = sum(1 for item in users if item.get("active"))
    text = (
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {active_links}"
    )
    await message.answer(text, reply_markup=main_kb)

@dp.message()
async def handle_message(message: Message):
    username = save_user(message)
    user_text = (message.text or "").strip()

    normalized = user_text.lower()
    if normalized in {"/buy", "buy", "–ø–æ–ª—É—á–∏—Ç—å vpn", "–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø"} or user_text == "üí° –ü–æ–ª—É—á–∏—Ç—å VPN":
        await issue_and_send_key(message, username)
        return

    if normalized in {"/renew", "renew", "–ø—Ä–æ–¥–ª–∏—Ç—å", "–ø—Ä–æ–¥–ª–∏—Ç—å vpn"} or user_text == "‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN":
        await renew_vpn_key(message, username)
        return

    if normalized in {"/mykey", "–º–æ–π –∫–ª—é—á", "–∫–ª—é—á", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª—é—á"}:
        await send_key_status(message, username)
        return

    if normalized == "/admin":
        await admin_cmd(message)
        return

    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ ‚Äî –±–æ—Ç ¬´–¥—É–º–∞–µ—Ç¬ª
    await message.answer("‚úâÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", reply_markup=main_kb)

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram @"
                        f"{username}. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—Ç–∏."
                        " –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî '–ü–æ–ª—É—á–∏—Ç—å VPN' –∏–ª–∏ '–ü—Ä–æ–¥–ª–∏—Ç—å VPN', –∏–Ω–∏—Ü–∏–∏—Ä—É–π"
                        " —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ OpenAPI."
                    ),
                },
                {"role": "user", "content": user_text},
            ]
        )
        gpt_reply = completion.choices[0].message.content.strip()
        await message.answer(gpt_reply, reply_markup=main_kb)
        logging.info(f"GPT –æ—Ç–≤–µ—Ç–∏–ª @{username}: {gpt_reply}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ @{username}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_kb)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    ensure_tables()
    logging.info("–ë–æ—Ç VPN_GPT –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


# === Middleware: –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_id ===
class UpdateChatIDMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        try:
            if event.from_user and event.chat:
                with sqlite3.connect(DB_PATH) as conn:
                    conn.execute(
                        "INSERT OR REPLACE INTO tg_users (username, chat_id) VALUES (?, ?)",
                        (event.from_user.username, event.chat.id),
                    )
        except Exception as exc:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å chat_id", exc_info=True, extra={"error": str(exc)})
        return await handler(event, data)


dp.message.middleware(UpdateChatIDMiddleware())
print("‚úÖ Middleware UpdateChatIDMiddleware –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
