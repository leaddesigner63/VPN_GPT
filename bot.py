import asyncio
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from openai import AsyncOpenAI
from config import BOT_TOKEN, GPT_API_KEY, GPT_ASSISTANT_ID, ADMIN_ID
from utils.vpn import add_vpn_user
from utils.qrgen import make_qr
from utils.db import (
    init_db, save_message, get_last_messages,
    save_vpn_key, get_expiring_keys, renew_vpn_key,
    get_expired_keys, deactivate_vpn_key, get_all_active_users
)
import subprocess
import os

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(api_key=GPT_API_KEY)
XRAY_CONFIG = "/usr/local/etc/xray/config.json"


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ===
def is_admin(user_id):
    return user_id == ADMIN_ID


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start(msg: types.Message):
    if is_admin(msg.from_user.id):
        await msg.answer("üîß –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –û—Ç–ø—Ä–∞–≤—å /admin —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        await msg.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name or '–¥—Ä—É–≥'}!\n"
            "–Ø ‚Äî VPN GPT, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ VPN.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å /buy —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
            "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üëá"
        )


# === –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ===
@dp.message(Command("admin"))
async def admin_panel(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("/users", "/expired")
    keyboard.add("/broadcast")
    await msg.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


# === –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@dp.message(Command("users"))
async def list_users(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    users = get_all_active_users()
    if not users:
        return await msg.answer("üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
    
    text = "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for u in users:
        uid, name, exp = u
        text += f"‚Ä¢ {name} ‚Äî –¥–æ {exp[:10]} (ID: {uid})\n"
    await msg.answer(text)


# === –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
@dp.message(Command("expired"))
async def expired_users(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    expired = get_expired_keys()
    if not expired:
        return await msg.answer("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
    
    text = "üö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, full_name, _ in expired:
        text += f"‚Ä¢ {full_name} (ID: {user_id})\n"
    await msg.answer(text)


# === –†–∞—Å—Å—ã–ª–∫–∞ ===
@dp.message(Command("broadcast"))
async def broadcast(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    await msg.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    dp.message.register(send_broadcast)


async def send_broadcast(msg: types.Message):
    if not is_admin(msg.from_user.id):
        return

    users = get_all_active_users()
    text = msg.text
    count = 0
    for u in users:
        try:
            await bot.send_message(u[0], text)
            count += 1
            await asyncio.sleep(0.2)
        except:
            pass
    await msg.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    dp.message.unregister(send_broadcast)


# === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (buy, renew, GPT, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥) ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
# ... (–≤—Å—Ç–∞–≤—å —Å—é–¥–∞ –∫–æ–¥ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ bot.py)


async def main():
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

