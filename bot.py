import os
import logging
import asyncio
import sqlite3
from datetime import datetime
from typing import Any, Awaitable, Callable, Dict

import httpx
from dotenv import load_dotenv
from aiogram import BaseMiddleware, Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    BufferedInputFile,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI

from utils.qrgen import make_qr

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv("/root/VPN_GPT/.env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
GPT_API_KEY = os.getenv("GPT_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")
VPN_API_URL = os.getenv("VPN_API_URL", "http://127.0.0.1:8000")
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = OpenAI(api_key=GPT_API_KEY)

DB_PATH = "/root/VPN_GPT/dialogs.db"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("/root/VPN_GPT/bot.log"), logging.StreamHandler()]
)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Telegram ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å VPN")],
        [KeyboardButton(text="‚ôªÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN")],
        [KeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def ensure_tables():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS tg_users (
                username TEXT PRIMARY KEY,
                chat_id INTEGER,
                first_name TEXT,
                last_name TEXT,
                created_at TEXT
            )
        """)
        conn.commit()

def save_user(message: Message):
    username = message.from_user.username or f"id_{message.from_user.id}"
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            INSERT OR REPLACE INTO tg_users (username, chat_id, first_name, last_name, created_at)
            VALUES (?, ?, ?, ?, ?)
        """, (
            username,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.last_name,
            datetime.now().isoformat()
        ))
        conn.commit()
    return username

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def _request_vpn_key(username: str, days: int = 30) -> dict[str, Any]:
    params = {"x-admin-token": ADMIN_TOKEN} if ADMIN_TOKEN else None
    async with httpx.AsyncClient(timeout=10.0) as client:
        response = await client.post(
            f"{VPN_API_URL.rstrip('/')}/vpn/issue_key",
            json={"username": username, "days": days},
            params=params,
        )
    response.raise_for_status()
    return response.json()


async def issue_and_send_key(message: Message, username: str) -> None:
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é —Ç–µ–±–µ VPN-–∫–ª—é—á‚Ä¶", reply_markup=main_kb)
    try:
        payload = await _request_vpn_key(username)
        link = payload.get("link")
        if not link:
            raise ValueError("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        await message.answer(
            "üéÅ –¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN-–∫–ª—é—á –≥–æ—Ç–æ–≤!\n\n"
            f"üîó –°—Å—ã–ª–∫–∞:\n{link}",
            reply_markup=main_kb,
        )

        qr_stream = make_qr(link)
        await message.answer_photo(
            BufferedInputFile(qr_stream.getvalue(), filename="vpn_key.png"),
            caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        )
    except httpx.HTTPStatusError as http_err:
        status = http_err.response.status_code
        logging.error(
            "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞", exc_info=True, extra={"username": username, "status": status}
        )
        if status == 409:
            await message.answer(
                "‚ÑπÔ∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–ª–∏ —Ç–µ–∫—É—â–∏–π.",
                reply_markup=main_kb,
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
                f"\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {status}",
                reply_markup=main_kb,
            )
        logging.debug("API response body: %s", http_err.response.text)
    except Exception as err:
        logging.exception("–°–±–æ–π –ø—Ä–∏ –≤—ã–¥–∞—á–µ VPN-–∫–ª—é—á–∞", extra={"username": username})
        await message.answer(
            "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=main_kb,
        )


@dp.message(CommandStart())
async def start_cmd(message: Message):
    username = save_user(message)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or username}!\n\n"
        f"–Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>VPN_GPT</b>.\n"
        "–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å VPN –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã–¥–∞—Ç—å –¥–µ–º–æ-–∫–ª—é—á.\n"
        "‚öôÔ∏è –ü–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ üëá"
    )
    await message.answer(text, reply_markup=main_kb)
    await issue_and_send_key(message, username)

@dp.message()
async def handle_message(message: Message):
    username = save_user(message)
    user_text = (message.text or "").strip()

    normalized = user_text.lower()
    if normalized in {"/buy", "buy", "–ø–æ–ª—É—á–∏—Ç—å vpn", "–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø"} or user_text == "üí° –ü–æ–ª—É—á–∏—Ç—å VPN":
        await issue_and_send_key(message, username)
        return

    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ ‚Äî –±–æ—Ç ¬´–¥—É–º–∞–µ—Ç¬ª
    await message.answer("‚úâÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", reply_markup=main_kb)

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram @"
                        f"{username}. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—Ç–∏."
                        " –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî '–ü–æ–ª—É—á–∏—Ç—å VPN' –∏–ª–∏ '–ü—Ä–æ–¥–ª–∏—Ç—å VPN', –∏–Ω–∏—Ü–∏–∏—Ä—É–π"
                        " —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ OpenAPI."
                    ),
                },
                {"role": "user", "content": user_text},
            ]
        )
        gpt_reply = completion.choices[0].message.content.strip()
        await message.answer(gpt_reply, reply_markup=main_kb)
        logging.info(f"GPT –æ—Ç–≤–µ—Ç–∏–ª @{username}: {gpt_reply}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ @{username}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_kb)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    ensure_tables()
    logging.info("–ë–æ—Ç VPN_GPT –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


# === Middleware: –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_id ===
class UpdateChatIDMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        try:
            if event.from_user and event.chat:
                with sqlite3.connect(DB_PATH) as conn:
                    conn.execute(
                        "INSERT OR REPLACE INTO tg_users (username, chat_id) VALUES (?, ?)",
                        (event.from_user.username, event.chat.id),
                    )
        except Exception as exc:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å chat_id", exc_info=True, extra={"error": str(exc)})
        return await handler(event, data)


dp.message.middleware(UpdateChatIDMiddleware())
print("‚úÖ Middleware UpdateChatIDMiddleware –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
