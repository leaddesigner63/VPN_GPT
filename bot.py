import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from openai import AsyncOpenAI
from config import BOT_TOKEN, GPT_API_KEY, GPT_ASSISTANT_ID
from utils.vpn import add_vpn_user
from utils.qrgen import make_qr
from utils.db import init_db, save_message, get_last_messages

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(api_key=GPT_API_KEY)

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start(msg: types.Message):
    await msg.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name or '–¥—Ä—É–≥'}!\n"
        "–Ø ‚Äî VPN GPT, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ VPN.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å /buy —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üëá"
    )

# –ü–æ–∫—É–ø–∫–∞
@dp.message(Command("buy"))
async def buy(msg: types.Message):
    await msg.answer("‚è≥ –°–æ–∑–¥–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    link = add_vpn_user()
    qr = make_qr(link)
    await msg.answer("‚úÖ –í–∞—à VPN –≥–æ—Ç–æ–≤!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    await msg.answer(link)
    await msg.answer_photo(qr, caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

# –û–±—â–µ–Ω–∏–µ —Å GPT
@dp.message()
async def chat_with_assistant(msg: types.Message):
    user_input = msg.text.strip()
    user_id = msg.from_user.id
    username = msg.from_user.username or ""
    first_name = msg.from_user.first_name or "–¥—Ä—É–≥"
    last_name = msg.from_user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    history = get_last_messages(user_id)
    context = "\n".join([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {h[0]}\nGPT: {h[1]}" for h in history])

    system_prompt = (
        f"–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç VPN GPT. "
        f"–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –∏–º–µ–Ω–∏ {full_name}. "
        f"–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤:\n{context}\n\n"
        f"–ê–¥–∞–ø—Ç–∏—Ä—É–π —Å—Ç–∏–ª—å –ø–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –ø–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å VPN BusinessVPN. "
        f"–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–º–∞–Ω–¥—É /buy."
    )

    try:
        thread = await client.beta.threads.create_and_run(
            assistant_id=GPT_ASSISTANT_ID,
            thread={
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_input},
                ]
            }
        )

        messages = await client.beta.threads.messages.list(thread_id=thread.id)
        if messages.data:
            reply = messages.data[0].content[0].text.value
            await msg.answer(reply)
            save_message(user_id, username, full_name, user_input, reply)
        else:
            await msg.answer("‚ö†Ô∏è GPT –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    except Exception as e:
        print("Error communicating with GPT Assistant:", e)
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

